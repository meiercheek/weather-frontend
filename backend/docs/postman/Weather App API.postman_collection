{
	"info": {
		"_postman_id": "74f92d3c-df88-4899-8dd6-ae0f7b979155",
		"name": "Weather App API",
		"description": "MTAA project by Lubomir Majercik and Denis Mokos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "createUser",
					"item": [
						{
							"name": "success creating user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 201', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test('Has a token => user created', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(true);\r",
											"    pm.environment.set(\"jwt-token\", data.token);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let email = 'johndoe@gmail.com';\r",
											"let username = 'JohnDoe';\r",
											"let password = 'pa$$word'\r",
											"pm.environment.set('user_email', email);\r",
											"pm.environment.set('username', username);\r",
											"pm.environment.set('password', password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a user to the system"
							},
							"response": []
						},
						{
							"name": "duplicate email in db while creating user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 409', () => {\r",
											"    pm.response.to.have.status(409);\r",
											"})\r",
											"\r",
											"pm.test('users already exists in db', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"user with this email already exists.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let email = 'johndoe@gmail.com';\r",
											"let username = 'JohnDoe';\r",
											"let password = 'pa$$word'\r",
											"pm.environment.set('user_email', email);\r",
											"pm.environment.set('username', username);\r",
											"pm.environment.set('password', password);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a user to the system"
							},
							"response": []
						},
						{
							"name": "invalid object sent while creating user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let email = 'johndoe@gmail.com';\r",
											"let username = 'JohnDoe';\r",
											"let password = 'pa$$word'\r",
											"pm.environment.set('user_email', email);\r",
											"pm.environment.set('username', username);\r",
											"pm.environment.set('password', password);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Invalid object', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"invalid object\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"username\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Adds a user to the system"
							},
							"response": []
						}
					]
				},
				{
					"name": "loginUser",
					"item": [
						{
							"name": "no username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let username = 'JohnDoe';\r",
											"let password = 'qqqqqqq'\r",
											"pm.environment.set('username', username);\r",
											"pm.environment.set('password', password);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 401', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('not authenticated', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								},
								"description": "logs the user in"
							},
							"response": []
						},
						{
							"name": "invalid password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let username = 'JohnDoe';\r",
											"let password = 'pa$$word'\r",
											"pm.environment.set('username', username);\r",
											"pm.environment.set('password', password);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Error shown', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"no username supplied\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								},
								"description": "logs the user in"
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let username = 'JohnDoe';\r",
											"let password = 'pa$$word'\r",
											"pm.environment.set('username', username);\r",
											"pm.environment.set('password', password);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Has a token => user logged in', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(true);\r",
											"    pm.environment.set(\"jwt-token\", data.token);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								},
								"description": "logs the user in"
							},
							"response": []
						},
						{
							"name": "No such user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let username = 'qwerty';\r",
											"let password = 'pa$$word'\r",
											"pm.environment.set('username', username);\r",
											"pm.environment.set('password', password);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test('No such user error shown', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"No user found.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"mrkvicka55\",\n    \"username\": \"jozkoM\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								},
								"description": "logs the user in"
							},
							"response": []
						}
					]
				},
				{
					"name": "getCurrentUser",
					"item": [
						{
							"name": "Succesfully gets the user's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Authenticated', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('user_id successfully extracted', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.environment.set(\"current_user_id\", data.response.user_id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"me"
									]
								},
								"description": "gets current user's id"
							},
							"response": []
						},
						{
							"name": "Not authorized when getting the user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('code 500 and auth is false', () => {\r",
											"    pm.response.to.have.status(500);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "none",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"me"
									]
								},
								"description": "gets current user's id"
							},
							"response": []
						},
						{
							"name": "No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('code 401 and auth is false', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "none",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"me"
									]
								},
								"description": "gets current user's id"
							},
							"response": []
						}
					]
				},
				{
					"name": "getUserById",
					"item": [
						{
							"name": "searches user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('username is JohnDoe', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.response.username).to.eql(\"JohnDoe\");\r",
											"    pm.environment.set(\"current_username\", data.response.username);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{current_user_id}}",
											"type": "string",
											"description": "(Required) user ID to find"
										}
									]
								},
								"description": "Returns a user by ID"
							},
							"response": []
						},
						{
							"name": "no user found by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test('no user found', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"No user found.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "7814815b-6bdf-4ca1-a6de-b682a845973d",
											"type": "string",
											"description": "(Required) user ID to find"
										}
									]
								},
								"description": "Returns a user by ID"
							},
							"response": []
						},
						{
							"name": "invalid uuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('bad uuid format', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"bad uuid format\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "badvalue",
											"type": "string",
											"description": "(Required) user ID to find"
										}
									]
								},
								"description": "Returns a user by ID"
							},
							"response": []
						},
						{
							"name": "no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('code 401 and auth is false', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "badvalue",
											"type": "string",
											"description": "(Required) user ID to find"
										}
									]
								},
								"description": "Returns a user by ID"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "reports",
			"item": [
				{
					"name": "createReport",
					"item": [
						{
							"name": "no reports by this user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test('array of reports arrived', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"No reports found.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{current_user_id}}",
											"type": "string",
											"description": "(Required) user ID to find his reports"
										}
									]
								},
								"description": "Returns a reports by owner"
							},
							"response": []
						},
						{
							"name": "successfully add report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 201 => report created', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{current_user_id}}\",\n    \"characteristic\": \"TEST\",\n    \"latitude\": 48.14816,\n    \"longitude\": 17.10674,\n    \"location\": \"Bratislava\",\n    \"uploadTime\": \"2021-01-29 09:12:33.001\",\n    \"description\": \"-\",\n    \"photo\": \"-\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									]
								},
								"description": "Adds a report to the system"
							},
							"response": []
						},
						{
							"name": "adding report without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('code 401 and auth is false', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{current_user_id}}\",\n    \"characteristic\": \"TEST\",\n    \"latitude\": 48.14816,\n    \"longitude\": 17.10674,\n    \"location\": \"Bratislava\",\n    \"uploadTime\": \"2021-01-29 09:12:33.001\",\n    \"description\": \"-\",\n    \"photo\": \"-\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									]
								},
								"description": "Adds a report to the system"
							},
							"response": []
						},
						{
							"name": "invalid report object when adding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 400 => bad object', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('bad uuid format', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"Invalid object received.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{current_user_id}}\",\n    \"characteristic\": \"Cloudy\",\n    \"location\": \"Bratislava\",\n    \"uploadTime\": \"2021-01-29 09:12:33.001\",\n    \"description\": \"-\",\n    \"photo\": \"-\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									]
								},
								"description": "Adds a report to the system"
							},
							"response": []
						}
					]
				},
				{
					"name": "getReportsById",
					"item": [
						{
							"name": "successully get report by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('array of reports arrived', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.response.reports).to.be.an(\"array\");\r",
											"    pm.environment.set(\"current_report\", data.response.reports[0].report_id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{current_user_id}}",
											"type": "string",
											"description": "(Required) user ID to find his reports"
										}
									]
								},
								"description": "Returns a reports by owner"
							},
							"response": []
						},
						{
							"name": "get report by id without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('code 401 and auth is false', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{current_user_id}}",
											"type": "string",
											"description": "(Required) user ID to find his reports"
										}
									]
								},
								"description": "Returns a reports by owner"
							},
							"response": []
						},
						{
							"name": "bad id format when getting it by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('bad uuid format', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"Bad uuid format.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "badvalue",
											"type": "string",
											"description": "(Required) user ID to find his reports"
										}
									]
								},
								"description": "Returns a reports by owner"
							},
							"response": []
						}
					]
				},
				{
					"name": "updateReport",
					"item": [
						{
							"name": "success updating report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 200 => report updated', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{current_user_id}}\",\n    \"characteristic\": \"CHANGED TEST\",\n    \"latitude\": 56.6874,\n    \"longitude\": 37.5547,\n    \"location\": \"not Bratislava\",\n    \"uploadTime\": \"2016-08-29T09:12:33.001Z\",\n    \"description\": \"report has been changed\",\n    \"photo\": \"lol\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/:report_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "{{current_report}}",
											"type": "string",
											"description": "(Required) report ID to edit"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update report without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('code 401 and auth is false', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{current_user_id}}\",\n    \"characteristic\": \"CHANGED TEST\",\n    \"latitude\": 56.6874,\n    \"longitude\": 37.5547,\n    \"location\": \"not Bratislava\",\n    \"uploadTime\": \"2016-08-29T09:12:33.001Z\",\n    \"description\": \"report has been changed\",\n    \"photo\": \"lol\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/:report_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "{{current_report}}",
											"type": "string",
											"description": "(Required) report ID to edit"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bad id when updating report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('bad report id format', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"Bad uuid format.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{current_user_id}}\",\n    \"characteristic\": \"Cloudy\",\n    \"latitude\": 56.6874,\n    \"longitude\": 37.5547,\n    \"location\": \"not Bratislava\",\n    \"uploadTime\": \"2016-08-29T09:12:33.001Z\",\n    \"description\": \"report has been changed\",\n    \"photo\": \"lol\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/:report_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "badvalue",
											"type": "string",
											"description": "(Required) report ID to edit"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bad object when updating report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('bad report id format', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"Invalid object received.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"{{current_user_id}}\",\n    \"characteristic\": \"Cloudy\",\n    \"location\": \"not Bratislava\",\n    \"uploadTime\": \"2016-08-29T09:12:33.001Z\",\n    \"description\": \"report has been changed\",\n    \"photo\": \"lol\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/:report_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "{{current_report}}",
											"type": "string",
											"description": "(Required) report ID to edit"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "deleteReport",
					"item": [
						{
							"name": "successully delete report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('code 401 and auth is false', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:report_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "{{current_report}}",
											"type": "string",
											"description": "(Required) report id to delete"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete report without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 204 => report deleted', () => {\r",
											"    pm.response.to.have.status(204);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:report_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "{{current_report}}",
											"type": "string",
											"description": "(Required) report id to delete"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bad id when deleting report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('bad uuid format', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"Bad uuid format.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:report_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "badvalue",
											"type": "string",
											"description": "(Required) report id to delete"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "geoReports",
					"item": [
						{
							"name": "no token georeports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('code 401 and auth is false', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.auth).to.eql(false);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/georeports?SWlat=45.46427&SWlong=9.18951&NElat=49.83826&NElong=24.02324",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"georeports"
									],
									"query": [
										{
											"key": "SWlat",
											"value": "45.46427",
											"description": "(Required) latitude of the southwest corner of user's mapview"
										},
										{
											"key": "SWlong",
											"value": "9.18951",
											"description": "(Required) longitude of the southwest corner of user's mapview"
										},
										{
											"key": "NElat",
											"value": "49.83826",
											"description": "(Required) latitude of the northeast corner of user's mapview"
										},
										{
											"key": "NElong",
											"value": "24.02324",
											"description": "(Required) longitude of the northeast corner of user's mapview"
										}
									]
								},
								"description": "Returns submitted reports from mapview"
							},
							"response": []
						},
						{
							"name": "successully fetch georeports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('array of reports arrived', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.response.reports).to.be.an(\"array\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/georeports?SWlat=45.46427&SWlong=9.18951&NElat=49.83826&NElong=24.02324",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"georeports"
									],
									"query": [
										{
											"key": "SWlat",
											"value": "45.46427",
											"description": "(Required) latitude of the southwest corner of user's mapview"
										},
										{
											"key": "SWlong",
											"value": "9.18951",
											"description": "(Required) longitude of the southwest corner of user's mapview"
										},
										{
											"key": "NElat",
											"value": "49.83826",
											"description": "(Required) latitude of the northeast corner of user's mapview"
										},
										{
											"key": "NElong",
											"value": "24.02324",
											"description": "(Required) longitude of the northeast corner of user's mapview"
										}
									]
								},
								"description": "Returns submitted reports from mapview"
							},
							"response": []
						},
						{
							"name": "invalid queries georeports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('array of reports arrived', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"Incorrect map data entered.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/georeports?SWlong=9.18951&NElat=49.83826&NElong=24.02324",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"georeports"
									],
									"query": [
										{
											"key": "SWlat",
											"value": "45.46427",
											"description": "(Required) latitude of the southwest corner of user's mapview",
											"disabled": true
										},
										{
											"key": "SWlong",
											"value": "9.18951",
											"description": "(Required) longitude of the southwest corner of user's mapview"
										},
										{
											"key": "NElat",
											"value": "49.83826",
											"description": "(Required) latitude of the northeast corner of user's mapview"
										},
										{
											"key": "NElong",
											"value": "24.02324",
											"description": "(Required) longitude of the northeast corner of user's mapview"
										}
									]
								},
								"description": "Returns submitted reports from mapview"
							},
							"response": []
						},
						{
							"name": "no georeports matching criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test('array of reports arrived', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.error).to.eql(\"No reports found.\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{jwt-token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/georeports?SWlat=0&SWlong=0&NElat=0&NElong=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"georeports"
									],
									"query": [
										{
											"key": "SWlat",
											"value": "0",
											"description": "(Required) latitude of the southwest corner of user's mapview"
										},
										{
											"key": "SWlong",
											"value": "0",
											"description": "(Required) longitude of the southwest corner of user's mapview"
										},
										{
											"key": "NElat",
											"value": "0",
											"description": "(Required) latitude of the northeast corner of user's mapview"
										},
										{
											"key": "NElong",
											"value": "0",
											"description": "(Required) longitude of the northeast corner of user's mapview"
										}
									]
								},
								"description": "Returns submitted reports from mapview"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000"
		},
		{
			"key": "x-access-token\n",
			"value": "null"
		},
		{
			"key": "jwttoken",
			"value": ""
		},
		{
			"key": "current_user_id",
			"value": ""
		},
		{
			"key": "current_username",
			"value": ""
		},
		{
			"key": "currrent_report",
			"value": ""
		}
	]
}